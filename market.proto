syntax = "proto3";

service MarketService {
  // Seller
  rpc RegisterSeller(RegisterSellerRequest) returns (RegisterSellerResponse);
  rpc SellItem(SellItemRequest) returns (SellItemResponse);
  rpc UpdateItem(UpdateItemRequest) returns (UpdateItemResponse);
  rpc DeleteItem(DeleteItemRequest) returns (DeleteItemResponse);
  rpc DisplaySellerItems(DisplaySellerItemsRequest) returns (DisplaySellerItemsResponse);

  // Buyer
  rpc SearchItem(SearchItemRequest) returns (SearchItemResponse);
  rpc BuyItem(BuyItemRequest) returns (BuyItemResponse);
  rpc AddToWishList(AddToWishListRequest) returns (AddToWishListResponse);
  rpc RateItem(RateItemRequest) returns (RateItemResponse);
}

service BuyerService {
  rpc BuyerNotification(ClientNotificationRequest) returns (ClientNotificationResponse);
}

service SellerService {
  rpc SellerNotification(SellerNotificationRequest) returns (SellerNotificationResponse);
}
message ClientNotificationRequest {
  message Item {
    int32 item_id = 1;
    float price_per_unit = 2;
    string product_name = 3;
    string category = 4;
    string description = 5;
    int32 quantity = 6;
    // string seller = 7;
    float ratings = 7;
  }
  Item item = 1;
}
message ClientNotificationResponse {
  string message = 1;
}
message SellerNotificationRequest {
  message Item {
    int32 item_id = 1;
    float price_per_unit = 2;
    string product_name = 3;
    string category = 4;
    string description = 5;
    int32 quantity = 6;
    // string seller = 7;
    float ratings = 7;
  }
  Item item = 1;
}
message SellerNotificationResponse {
  string message = 1;
}
message RegisterSellerRequest {
  string address = 1; // Seller's IP address and port (ip:port)
  string uuid = 2; // Seller's unique UUID
}
message RegisterSellerResponse {
  enum Status {
    SUCCESS = 0;
    FAILED = 1;
  }
  Status status = 1;
}

message SellItemRequest {
  string product_name = 1;
  string category = 2;
  int32 quantity = 3;
  string description = 4;
  string seller_address = 5;
  float price_per_unit = 6;
  string seller_uuid = 7;
}
message SellItemResponse {
  string message = 1;
  int32 item_id = 2;
}

message UpdateItemRequest {
  int32 item_id = 1;
  float new_price = 2;
  int32 new_quantity = 3;
  string seller_address = 4;
  string seller_uuid = 5;
}
message UpdateItemResponse {
  enum Status {
    SUCCESS = 0;
    FAILED = 1;
  }
  Status status = 1;
}

message DeleteItemRequest {
  int32 item_id = 1;
  string seller_address = 2;
  string seller_uuid = 3;
}
message DeleteItemResponse {
  enum Status {
    SUCCESS = 0;
    FAILED = 1;
  }
  Status status = 1;
}

message DisplaySellerItemsRequest {
  string seller_address = 1;
  string seller_uuid = 2;
}
message DisplaySellerItemsResponse {
  message Item {
    int32 item_id = 1;
    float price = 2;
    string product_name = 3;
    string category = 4;
    string description = 5;
    int32 quantity_remaining = 6;
    string seller = 7;
    float rating = 8;
  }
  repeated Item items = 1;
}

message SearchItemRequest {
  string item_name = 1; // leave empty to display all items
  string category = 2;
}
message SearchItemResponse {
  message Item {
    int32 item_id = 1;
    float price = 2;
    string product_name = 3;
    string category = 4;
    string description = 5;
    int32 quantity_remaining = 6;
    float rating = 7;
    string seller_address = 8;
  }
  repeated Item items = 1;
}

message BuyItemRequest {
  int32 item_id = 1;
  int32 quantity = 2;
  string buyer_address = 3;
}
message BuyItemResponse {
  enum Status {
    SUCCESS = 0;
    FAILED = 1;
  }
  Status status = 1;
}

message AddToWishListRequest {
  int32 item_id = 1;
  string buyer_address = 2;
}
message AddToWishListResponse {
  enum Status {
    SUCCESS = 0;
    FAILED = 1;
  }
  Status status = 1;
}

message RateItemRequest {
  int32 item_id = 1;
  string buyer_address = 2;
  int32 rating = 3;
}
message RateItemResponse {
  enum Status {
    SUCCESS = 0;
    FAILED = 1;
  }
  Status status = 1;
}